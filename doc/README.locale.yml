texts:
  ja: DLint
  en: __COPY__
---
texts:
  ja: "![](https://github.com/fujiharuka/dlint/workflows/all%20packages/badge.svg)"
  en: __COPY__
---
texts:
  ja: JavaScript / TypeScript プロジェクトのためのレイヤー間依存関係を管理する Linter。
  en: Linter about inter-layer dependencies for JavaScript / TypeScript projects.
---
texts:
  ja: Motivation
  en: __COPY__
---
texts:
  ja: 保守性の高いコードを書くには、モジュールを関心ごとに分割して、クリーンな依存関係を保つことが大切です。レイヤードアーキテクチャを始めとした DDD のさまざまなアーキテクチャは、細かい違いを無視すれば、同じことを言っています。モジュールをレイヤーで区切り、ドメイン知識を一つのレイヤーにまとめるということです。ドメイン知識を凝集したレイヤーは他のレイヤーに依存せず、逆に他のレイヤーがそのレイヤーに依存します。
  en: If you want to keep your codebase maintenable, it's important to split the code into modules by concerns and keep dependency structure clean. Layered Architecture and other variation architectures in DDD (Domain-Driven Design) say the same thing when viewed as a whole. They group modules by layer. Modules representing domain knowledge are gathered into a single domain layer. The domain layer doesn't depend on other layers, but other layers depend on it.
---
texts:
  ja: これは素晴らしいアイデアだし、うまくいきそうな気がします。しかし、レイヤー間の依存関係をクリーンに保つには実装者が気遣ってあげなければなりません。ある日、ちょっとしたコード変更のつもりでコードベースにコミットしたら、意図せずレイヤーの依存関係が壊れてしまうかもしれません。
  en: That's a great idea. I love it. But there's one problem. Developers have to take care of inter-layer dependencies to keep them clean. Otherwise one day you may commit a small patch which unintentionally breaks the layer dependency structure.
---
texts:
  ja: そうした事故を防ぐために、レイヤー間の依存関係ルールをあらかじめ設定しておいて、コードの静的解析によってレイヤー間の依存関係を保証すると便利です。これが DLint のモチベーションです。DLint を使えば、コードベース内のモジュールをレイヤーでまとめ、レイヤー間の依存関係ルールを定義し、コードの依存関係がルール通りになっているかどうかをチェックできます。
  en: You might want to ensure inter-layer dependecies to avoid such an accident. That's why I made DLint. DLint ensures inter-layer dependency with static code analysis. It enables to define layers and inter-layer dependency rules, and checks that codes follow the rules.
---
texts:
  ja: Installation
  en: __COPY__
---
texts:
  ja: Usage
  en: __COPY__
---
texts:
  ja: DLint は CLI を提供しています。`dlint` コマンドは、設定ファイル `dlint-rules.yml` と一緒に使います。これはレイヤーとレイヤー間の依存関係ルールを定義した設定ファイルです。
  en: DLint provides CLI. The `dlint` command is used with a rule config file called `dlint-rules.yml`. This defines inter-layer dependency rules.
---
texts:
  ja: 例を見ましょう。今、以下のようなディレクトリ構成のプロジェクトを考えます。
  en: Show me an example. Here is a project with a directory structure as follows.
---
texts:
  ja: このプロジェクトルートに以下のような `dlint-rules.yml` を書きます。
  en: Put `dlint-rules.yml` as follows on the project root.
---
texts:
  ja: "`layers` フィールドは、レイヤーを定義しています。ここでは `entity`、`controller`、`main` の 3 つのレイヤーがあり、各レイヤーは [glob パターン](https://github.com/mrmlnc/fast-glob#pattern-syntax)で定義されます。たとえば `entity` レイヤーは `entities/` ディレクトリ以下にあるすべての `.js` ファイルが対象です。"
  en: "`layers` field defines layers. There are 3 layers (`entity`, `controller`, and `main`), and each layer is defined with [glob pattern](https://github.com/mrmlnc/fast-glob#pattern-syntax). For example, `entity` layer is composed of all `.js` files under `entities/` directory."
---
texts:
  ja: "`rules` フィールドは、各レイヤーの依存関係ルールを定義しています。依存関係ルールは配列であり、後のルールが前のルールを上書きします。たとえば、`controller` レイヤーのルールを見ましょう。"
  en: "`rules` field defines dependency rules of layers. Dependency rules are array, and a next rule overrides previous rules. Let's see the rule of `controller`."
---
texts:
  ja: "`disallow: allLayers`"
  en: __COPY__
---
texts:
  ja: すべてのレイヤーに対しての依存を禁止する
  en: Disallow dependencies on all layers
---
texts:
  ja: "`disallow: allPackages`"
  en: __COPY__
---
texts:
  ja: すべてのパッケージへの依存を禁止する
  en: Disallow dependencies on all packages
---
texts:
  ja: "`allow: layers`"
  en: __COPY__
---
texts:
  ja: "指定したレイヤーへの依存を許可する。（最初の `disallow: allLayers` を上書きする）"
  en: "Allow dependencies on the specific layers. (Overrides the previous `disallow: allLayers` rule)"
---
texts:
  ja: ここでは `entity` レイヤーへの依存を許可している
  en: In this case, it alllows dependencies on the `entity` layer.
---
texts:
  ja: 依存の許可とは import 文 (と require 関数) が許可されるかどうかです。各レイヤーのルールを要約すると以下のとおりです。
  en: Allowance of dependencies means whether "import" statements (and "require()" functions) are allowed. In short each layer insists as follows.
---
texts:
  ja: "`entity` レイヤー: すべての import を禁止する"
  en: "`entity` layer: Disallow all import statements"
---
texts:
  ja: "`controller` レイヤー: `entity` レイヤーの import だけを許可します"
  en: "`controller` layer: Allow import statements only from `entity` layer"
---
texts:
  ja: "`main` レイヤー: すべての import を許可します"
  en: "`main` layer: Allow all import statements"
---
texts:
  ja: これで `dlint-rules.yml` が用意できました。コードがこの依存関係ルールに一致しているかどうかを確認するには、`dlint` コマンドを使います。
  en: Now `dlint-rules.yml` is ready. Use `dlint` command to check that codes follow the dependency rules.
---
texts:
  ja: 何も出力されなければ、valid な状態です。ルール違反があればエラーメッセージで教えてくれます。
  en: If the terminal outputs nothing, it's no problem. The command will show error messages when there are any errors.
---
texts:
  ja: Rule file syntax
  en: __COPY__
---
texts:
  ja: 依存関係ルールファイル (デフォルトでは `dlint-rules.yml`) は構文に YAML を使います。
  en: Dependency rule files (default is `dlitn-rules.yml`) use YAML syntax.
---
texts:
  ja: "`.layers`"
  en: __COPY__
---
texts:
  ja: "**必須**。プロジェクト内をレイヤーで分割します。レイヤーごとに依存関係ルールを定義することになります。"
  en: "**Required**. Set layers in the project. Each layer has own dependency rule."
---
texts:
  ja: "`.layers.<layer_name>`"
  en: __COPY__
---
texts:
  ja: 各レイヤーに名前を与えます。レイヤー名は `rules` フィールドでレイヤーを指定するために使います。
  en: Each layer has its name. The layer name is used to identify it in `rules` field.
---
texts:
  ja: 値にはレイヤーに属するファイルパスの[glob パターン](https://github.com/mrmlnc/fast-glob#pattern-syntax) を文字の配列でセットします。ファイルパスはルールファイルからの相対パス、または `rootDir` からの相対パスです。
  en: Set array of strings of file path [glob pattern](https://github.com/mrmlnc/fast-glob#pattern-syntax) which belong to the layer. File paths is relative paths from the rule file or `rootDir`.
---
texts:
  ja: "`.rules`"
  en: __COPY__
---
texts:
  ja: "**必須**。各レイヤーに適用する依存関係ルールをここに書きます。"
  en: "**Required**. Dependency rules applied to layers."
---
texts:
  ja: "`.rules.<layer_name>`"
  en: __COPY__
---
texts:
  ja: "名前で参照されたレイヤーに適用する依存関係ルールを配列でセットします。ルールは `allow: <target>` または `disallow: <target>` という形で、target によっては `on:` が必要な場合があります。後のルールが前のルールを上書きします。"
  en: "Set array of dependency rules applied to the layer specified by the name. The rule form is `allow: <target>` or `disallow: <target>`. Some targets requires `on` field. A next rule overrides previous rules."
---
texts:
  ja: "例:"
  en: "Example:"
---
texts:
  ja: 以下がルール対象の一覧です。
  en: Here is the rule targets list.
---
texts:
  ja: target
  en: __COPY__
---
texts:
  ja: on
  en: __COPY__
---
texts:
  ja: 説明
  en: description
---
texts:
  ja: all
  en: __COPY__
---
texts:
  ja: "-"
  en: __COPY__
---
texts:
  ja: すべてのレイヤーとパッケージ
  en: all layers and all packages
---
texts:
  ja: allLayers
  en: __COPY__
---
texts:
  ja: "-"
  en: __COPY__
---
texts:
  ja: すべてのレイヤー
  en: all layers
---
texts:
  ja: allPackages
  en: __COPY__
---
texts:
  ja: "-"
  en: __COPY__
---
texts:
  ja: すべてのパッケージ
  en: all packages
---
texts:
  ja: allNodejs
  en: __COPY__
---
texts:
  ja: "-"
  en: __COPY__
---
texts:
  ja: すべての Node.js ビルトインパッケージ
  en: all Node.js builtin packages
---
texts:
  ja: allJson
  en: __COPY__
---
texts:
  ja: "-"
  en: __COPY__
---
texts:
  ja: すべての JSON ファイル
  en: all JSON files
---
texts:
  ja: layers
  en: __COPY__
---
texts:
  ja: "**required**"
  en: __COPY__
---
texts:
  ja: "`on` で指定したレイヤー"
  en: "layers specified by `on` field"
---
texts:
  ja: packages
  en: __COPY__
---
texts:
  ja: "**required**"
  en: __COPY__
---
texts:
  ja: "`on` で指定したパッケージ"
  en: "layers specified by `on` field"
---
texts:
  ja: "`.defaultRules`"
  en: __COPY__
---
texts:
  ja: 任意。すべてのレイヤーに規定で適用されるルールを配列で指定します。
  en: Optional. Set array of rules applied all layers by default.
---
texts:
  ja: "`.ignorePatterns`"
  en: __COPY__
---
texts:
  ja: 任意。レイヤーのファイルパターンで無視すべきものを glob パターンで指定します。
  en: Optional. Set array of strings of glob pattern by which files should be ignored in the layers definition.
---
texts:
  ja: "`.parser`"
  en: __COPY__
---
texts:
  ja: 任意。使用するパーサーのパッケージ名を指定します。サポートしているパッケージは [acorn](https://github.com/acornjs/acorn) と [@typescript-eslint/typescript-estree](https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/typescript-estree) です。デフォルトでは `acorn` が使用されます。TypeScript には `@typescript-eslint/typescript-estree` を使用してください。
  en: Optional. Set parser package name to use. Supported packages are [acorn](https://github.com/acornjs/acorn) and [@typescript-eslint/typescript-estree](https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/typescript-estree). By default `acorn` is used. Use  `@typescript-eslint/typescript-estree` for TypeScript files.
---
texts:
  ja: 例
  en: Example
---
texts:
  ja: "`.rootDir`"
  en: __COPY__
---
texts:
  ja: 任意。レイヤーのファイルパターンのルートディレクトリを指定します。デフォルトではルールファイルのあるディレクトリになります。
  en: Optional. Set root directory of layer file patterns. By default root directory is where the rule file is.
---
texts:
  ja: Example
  en: __COPY__
---
texts:
  ja: See [example/](./example).
  en: __COPY__
